generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Partner {
  id         String   @id @default(uuid())
  name       String
  logo       String?
  is_active  Boolean  @default(true)
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  configs    PartnerConfig[]
  screens    Screen[]
  fields     Field[]
  categories Category[]

  @@unique([name])

  @@map("partner") // Map to the "partner" table in the DB
}

model Category {
  id         String   @id @default(uuid())
  partner_id String
  partner    Partner  @relation(fields: [partner_id], references: [id], onDelete: Cascade)
  name       String
  is_active  Boolean  @default(true)
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  screens Screen[]

  @@unique([partner_id, name])
  @@map("category") // Map to the "category" table in the DB
}

model PartnerConfig {
  id            String   @id @default(uuid())
  partner_id    String
  partner       Partner  @relation(fields: [partner_id], references: [id], onDelete: Cascade)
  global_config Json
  header_config Json
  footer_config Json
  layout_config Json
  screen_ids    Json?

  version       Int      @default(autoincrement())
  created_at    DateTime @default(now())
  updated_at    DateTime @updatedAt

  @@map("partnerconfig") // Map to the "partnerconfig" table in the DB
}

model Screen {
  id                    String   @id @default(uuid())
  partner_id            String
  partner               Partner  @relation(fields: [partner_id], references: [id], onDelete: Cascade)
  category_name         String
  category              Category @relation(fields: [partner_id, category_name], references: [partner_id, name], onDelete: Cascade)
  configuration_version Int // Added field
  is_active              Boolean  @default(true)
  screen_config         Json
  created_at            DateTime @default(now())
  updated_at            DateTime @updatedAt
  field_ids    Json?

  // Relationships
  fields Field[]
}

model Field {
  id                    String   @id @default(uuid())
  screen_id             String
  screen                Screen   @relation(fields: [screen_id], references: [id], onDelete: Cascade)
  type                  String
  field_config          Json
  is_active             Boolean  @default(true)
  configuration_version Int
  created_at            DateTime @default(now())
  updated_at            DateTime @updatedAt
  Partner               Partner? @relation(fields: [partner_id], references: [id])
  partner_id             String?
}
